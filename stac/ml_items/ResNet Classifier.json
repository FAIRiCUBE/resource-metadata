{
    "type": "Feature",
    "stac_version": "1.0.0",
    "stac_extensions": [
        "https://stac-extensions.github.io/ml-model/v1.0.0/schema.json"
    ],
    "id": "N9OEWG3UEI",
    "collection": "ML collection",
    "geometry": {
        "type": "Polygon",
        "coordinates": [
            [
                [
                    -180,
                    -90
                ],
                [
                    -180,
                    90
                ],
                [
                    180,
                    90
                ],
                [
                    180,
                    -90
                ],
                [
                    -180,
                    -90
                ]
            ]
        ]
    },
    "bbox": [
        -180,
        -90,
        180,
        90
    ],
    "properties": {
        "provider": "cozzolinoac11",
        "use-case": "common",
        "title": "ResNet Classifier",
        "description": "ResNet is an artificial neural network that introduced a so-called \u201cidentity shortcut connection,\u201d which allows the model to skip one or more layers. This approach makes it possible to train the network on thousands of layers without affecting performance. It\u2019s become one of the most popular architectures for various computer vision tasks.",
        "main-category": "Deep Learning",
        "datetime": "2024-07-09",
        "keywords": [
            "ResNet",
            " Residual Network",
            " image classification",
            "jupyter_notebook_available"
        ],
        "platform": "Google Cloud Platform",
        "framework": "Keras",
        "algorithm": "ResNet",
        "license": "MIT",
        "ml-model:type": "ml-model",
        "ml-model:learning_approach": "supervised",
        "ml-model:prediction_type": "classification",
        "ml-model:architecture": "ResNet",
        "ml-model:training-processor-type": "gpu",
        "ml-model:training-os": "linux",
        "use-constraints": "",
        "model-configuration": ""
    },
    "links": [
        {
            "rel": "root",
            "href": "./catalog.json",
            "type": "application/json",
            "title": "Root"
        },
        {
            "rel": "parent",
            "href": "./catalog.json",
            "type": "application/json",
            "title": "ML collection"
        },
        {
            "href": "https://arxiv.org/abs/1512.03385",
            "rel": "about",
            "type": "text/html",
            "title": "Reference link"
        },
        {
            "href": "https://github.com/FAIRiCUBE/common-code/blob/main/record-computational-demands-automatically/ResNet/main.py",
            "rel": "about",
            "type": "text/html",
            "title": "Implementation example"
        }
    ],
    "assets": {
        "input-data-used": {
            "href": "https://www.cs.toronto.edu/~kriz/cifar.html",
            "type": "Data",
            "title": "Input data used",
            "description": "The CIFAR-10 dataset consists of 60000 32x32 color images in 10 classes (airplane, automobile, bird, cat, deer, dog, frog, horse, ship, truck), with 6000 images per class. There are 50000 training images and 10000 test images.\r\nThe dataset is divided into five training batches and one test batch, each with 10000 images. The test batch contains exactly 1000 randomly-selected images from each class. The training batches contain the remaining images in random order, but some training batches may contain more images from one class than another. Between them, the training batches contain exactly 5000 images from each class. ",
            "biases-and-ethical-aspects": "",
            "roles": [
                "data"
            ]
        },
        "model-checkpoint": {
            "href": "Keras model",
            "type": "application/octet-stream",
            "title": "Model",
            "description": "Keras model",
            "performance": "Accuracy: 0.55; Epochs: 20; Batch size: 64",
            "roles": [
                "ml-model:checkpoint"
            ]
        }
    }
}